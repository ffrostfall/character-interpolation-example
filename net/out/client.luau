--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.15.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Unreliable[1] = CreateQueue()
Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
export type NetworkId = number
export type CharacterTransform = { position: Vector3, y_rot: number }
export type Snapshot = { transforms: {[number]: { position: Vector3, y_rot: number }}, timestamp: number }
local function WriteEVENT_send_local_position(Value: { position: Vector3, y_rot: number }): ()
	-- Allocate BLOCK: 8 bytes
	local BLOCK_START = Allocate(8)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Vector = Value.position
	if Vector.X > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b0_11111_0000000000)
	elseif Vector.X < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000000)
	elseif Vector.X ~= Vector.X then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000001)
	elseif Vector.X == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0)
	else
		local float = Vector.X
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Result)
	end
	if Vector.Y > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b0_11111_0000000000)
	elseif Vector.Y < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000000)
	elseif Vector.Y ~= Vector.Y then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000001)
	elseif Vector.Y == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0)
	else
		local float = Vector.Y
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 3, Result)
	end
	if Vector.Z > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b0_11111_0000000000)
	elseif Vector.Z < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000000)
	elseif Vector.Z ~= Vector.Z then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000001)
	elseif Vector.Z == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0)
	else
		local float = Vector.Z
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 5, Result)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 7, Value.y_rot)
end

local function ReadEVENT_send_snapshot(): ({ transforms: {[number]: { position: Vector3, y_rot: number }}, timestamp: number })
	-- Read BLOCK: 10 bytes
	local BLOCK_START = Read(10)
	local Value = {} :: any
	Value.transforms = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(4)
		local Key_1 = buffer.readu32(RecieveBuffer, OFFSET_0)
		local Element_1 = {} :: any
		local OFFSET_1 = Read(2)
		local Encoded = buffer.readu16(RecieveBuffer, OFFSET_1)
		local X
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				X = -math.huge
			else
				X = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			X = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			X = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			X = if Encoded // 0x8000 == 1 then -Result else Result
		end
		local OFFSET_2 = Read(2)
		Encoded = buffer.readu16(RecieveBuffer, OFFSET_2)
		local Y
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Y = -math.huge
			else
				Y = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Y = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Y = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Y = if Encoded // 0x8000 == 1 then -Result else Result
		end
		local OFFSET_3 = Read(2)
		Encoded = buffer.readu16(RecieveBuffer, OFFSET_3)
		local Z
		local MantissaExponent = Encoded % 0x8000
		if MantissaExponent == 0b0_11111_0000000000  then
			if Encoded // 0x8000 == 1 then
				Z = -math.huge
			else
				Z = math.huge
			end
		elseif MantissaExponent == 0b1_11111_0000000000   then
			Z = 0 / 0
		elseif MantissaExponent == 0b0_00000_0000000000   then
			Z = 0
		else
			local Mantissa = MantissaExponent % 0x400
			local Exponent = MantissaExponent // 0x400
			local Fraction;
			if Exponent == 0 then
				Fraction = Mantissa / 0x400
			else
				Fraction = Mantissa / 0x800 + 0.5
			end
			local Result = math.ldexp(Fraction, Exponent - 14)
			Z = if Encoded // 0x8000 == 1 then -Result else Result
		end
		Element_1.position = Vector3.new(X, Y, Z)
		local OFFSET_4 = Read(1)
		Element_1.y_rot = buffer.readu8(RecieveBuffer, OFFSET_4)
		Value.transforms[Key_1] = Element_1
	end
	Value.timestamp = buffer.readf64(RecieveBuffer, BLOCK_START + 2)
	return Value
end

local function ReadEVENT_add_character_batch(): ({ { networkId: number, owner: (number)? } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 644 then error(`Expected "Length" to be smaller than 644, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 5 bytes
	local ARRAY_START_1 = Read(5 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		Item_1.networkId = buffer.readu32(RecieveBuffer, OPERATION_OFFSET)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		if buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1 then
			-- Read BLOCK: 8 bytes
			local BLOCK_START = Read(8)
			Item_1.owner = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
		end
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

local function ReadEVENT_remove_character_batch(): ({ number })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 655 then error(`Expected "Length" to be smaller than 655, got {Length} instead.`) end
	local Value = table.create(Length)
		-- Read BLOCK: 4 bytes
	local ARRAY_START_1 = Read(4 * Length)
	for Index = 1, Length do
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local Item_1 = buffer.readu32(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value, Item_1)
	end
	-- END ARRAY
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	send_local_position = {
		fire = NOOP
	},
	send_snapshot = {
		iter = NOOP,
		next = NOOP
	},
	add_character_batch = {
		on = NOOP
	},
	remove_character_batch = {
		on = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild("BLINK_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild("BLINK_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { { networkId: number, owner: (number)? } } = ReadEVENT_add_character_batch()
			if Events.Reliable[0] ~= nil then
				task.spawn(Events.Reliable[0], Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"add_character_batch\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: { number } = ReadEVENT_remove_character_batch()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"remove_character_batch\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			Push(Queue.Unreliable[1], table.pack(ReadEVENT_send_snapshot()))
		end
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	send_local_position = {
		fire = function(Value: { position: Vector3, y_rot: number }): ()
			local Previous = Save()
			Load()
			WriteEVENT_send_local_position(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireServer(Buffer, SendInstances)
			Load(Previous)
		end
	},
	send_snapshot = {
		iter = function(): () -> (number, { transforms: {[number]: { position: Vector3, y_rot: number }}, timestamp: number })
			local index = 0
			local queue = Queue.Unreliable[1]
			return function (): (number, { transforms: {[number]: { position: Vector3, y_rot: number }}, timestamp: number })
				index += 1
				local arguments = Pop(queue)
				if arguments ~= nil then
					return index, unpack(arguments, 1, arguments.n)
				end
				return 
			end
		end,
		--- @deprecated v0.14.1 -- Use `Iter` instead.
		next = function(): () -> (number, { transforms: {[number]: { position: Vector3, y_rot: number }}, timestamp: number })
			local index = 0
			local queue = Queue.Unreliable[1]
			return function (): (number, { transforms: {[number]: { position: Vector3, y_rot: number }}, timestamp: number })
				index += 1
				local arguments = Pop(queue)
				if arguments ~= nil then
					return index, unpack(arguments, 1, arguments.n)
				end
				return 
			end
		end
	},
	add_character_batch = {
		on = function(Listener: (Value: { { networkId: number, owner: (number)? } }) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				Events.Reliable[0] = nil
			end
		end
	},
	remove_character_batch = {
		on = function(Listener: (Value: { number }) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				Events.Reliable[1] = nil
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL